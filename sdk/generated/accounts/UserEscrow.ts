/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link UserEscrow}
 * @category Accounts
 * @category generated
 */
export type UserEscrowArgs = {
  bump: number
  user: web3.PublicKey
}

export const userEscrowDiscriminator = [242, 233, 85, 38, 26, 5, 142, 109]
/**
 * Holds the data for the {@link UserEscrow} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class UserEscrow implements UserEscrowArgs {
  private constructor(readonly bump: number, readonly user: web3.PublicKey) {}

  /**
   * Creates a {@link UserEscrow} instance from the provided args.
   */
  static fromArgs(args: UserEscrowArgs) {
    return new UserEscrow(args.bump, args.user)
  }

  /**
   * Deserializes the {@link UserEscrow} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [UserEscrow, number] {
    return UserEscrow.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link UserEscrow} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<UserEscrow> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find UserEscrow account at ${address}`)
    }
    return UserEscrow.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'rwcn6Ry17ChPXpJCN2hoK5kwpgFarQqzycXwVJ3om7U'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, userEscrowBeet)
  }

  /**
   * Deserializes the {@link UserEscrow} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [UserEscrow, number] {
    return userEscrowBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link UserEscrow} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return userEscrowBeet.serialize({
      accountDiscriminator: userEscrowDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link UserEscrow}
   */
  static get byteSize() {
    return userEscrowBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link UserEscrow} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      UserEscrow.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link UserEscrow} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === UserEscrow.byteSize
  }

  /**
   * Returns a readable version of {@link UserEscrow} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      user: this.user.toBase58(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const userEscrowBeet = new beet.BeetStruct<
  UserEscrow,
  UserEscrowArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['user', beetSolana.publicKey],
  ],
  UserEscrow.fromArgs,
  'UserEscrow'
)
