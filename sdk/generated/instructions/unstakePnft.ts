/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UnstakePnft
 * @category generated
 */
export const unstakePnftStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'UnstakePnftInstructionArgs'
)
/**
 * Accounts required by the _unstakePnft_ instruction
 *
 * @property [_writable_] stakePool
 * @property [_writable_] stakeEntry
 * @property [] stakeMint
 * @property [_writable_] stakeMintMetadata
 * @property [] stakeMintEdition
 * @property [_writable_] stakeTokenRecordAccount
 * @property [] authorizationRules
 * @property [_writable_, **signer**] user
 * @property [] userEscrow
 * @property [_writable_] userStakeMintTokenAccount
 * @property [] tokenMetadataProgram
 * @property [] sysvarInstructions
 * @property [] authorizationRulesProgram
 * @category Instructions
 * @category UnstakePnft
 * @category generated
 */
export type UnstakePnftInstructionAccounts = {
  stakePool: web3.PublicKey
  stakeEntry: web3.PublicKey
  stakeMint: web3.PublicKey
  stakeMintMetadata: web3.PublicKey
  stakeMintEdition: web3.PublicKey
  stakeTokenRecordAccount: web3.PublicKey
  authorizationRules: web3.PublicKey
  user: web3.PublicKey
  userEscrow: web3.PublicKey
  userStakeMintTokenAccount: web3.PublicKey
  tokenMetadataProgram: web3.PublicKey
  sysvarInstructions: web3.PublicKey
  authorizationRulesProgram: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const unstakePnftInstructionDiscriminator = [
  192, 227, 99, 215, 56, 106, 148, 203,
]

/**
 * Creates a _UnstakePnft_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category UnstakePnft
 * @category generated
 */
export function createUnstakePnftInstruction(
  accounts: UnstakePnftInstructionAccounts,
  programId = new web3.PublicKey('rwcn6Ry17ChPXpJCN2hoK5kwpgFarQqzycXwVJ3om7U')
) {
  const [data] = unstakePnftStruct.serialize({
    instructionDiscriminator: unstakePnftInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.stakePool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeEntry,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeMintMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeMintEdition,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.stakeTokenRecordAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authorizationRules,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.userEscrow,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.userStakeMintTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.sysvarInstructions,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authorizationRulesProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
